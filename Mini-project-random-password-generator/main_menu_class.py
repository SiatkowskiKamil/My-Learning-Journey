import random

# Defined constants
lowercase = 'abcdefghijklmnoprstuvwxyz'
uppercase = lowercase.upper()
digits = '0123456789'
specialCharacters = '!@#$%^&*()|_+<>-'


class Main_menu:
    """
    A class for generating passwords.
    """

    def __init__(self):
        pass

    def welcome_message(self):
        """
        Displays a welcome message and menu options.
        """
        while True:
            print('''-- Password generator --
Choose option:
1: generate password
2: exit program ''')

            userChoice = input('Your choice: ')

            if userChoice == '1':
                self.password_generator()
            elif userChoice == '2':
                print('Bye!')
                break
            else:
                print('\nPlease enter a correct value!\n')
                continue

    def password_generator(self):
        """
        Generates a random password based on user choice.
        """
        desiredLength = input('Provide password length: ')

        if not desiredLength.isdigit():
            print('\nPlease enter a correct value! Use digits.\n')
            return self.password_generator()
        else:
            desiredLength = int(desiredLength)

        availableCharacters = self.generate_characters()  # Generated by user.
        randomCharacters = ''.join(random.choices(availableCharacters,
                                                  k=desiredLength))

        print('\nGenerated password:', randomCharacters, '\n')

    def generate_characters(self):
        """
        Retrieves user preferences for character types
        and returns a set of characters for password generation.

        Returns:
            str: A string containing characters based on user preferences.
        """
        lowercaseQuestion = input('Use lowercase letters? y/n ').lower() == 'y'
        uppercaseQuestion = input('Use uppercase letters? y/n ').lower() == 'y'
        digitsQuestion = input('Use digits? y/n ').lower() == 'y'
        specialCharactersQuestion = input(
            '''Use special characters? y/n ''').lower() == 'y'

        availableCharacters = ''
        allDisabled = True  # Flag indicating whether all options are disabled.

        if lowercaseQuestion:
            availableCharacters += lowercase
            # If at least one option is enabled, set the flag to False.
            allDisabled = False
        if uppercaseQuestion:
            availableCharacters += uppercase
            allDisabled = False
        if digitsQuestion:
            availableCharacters += digits
            allDisabled = False
        if specialCharactersQuestion:
            availableCharacters += specialCharacters
            allDisabled = False

        if allDisabled:
            print("\nYou must select at least one character type.\n")
            return self.generate_characters()  # Recursively call the function.

        return availableCharacters
